---
  # This will setup a device for video conferencing.
  
  - hosts: all
    gather_facts: True
    vars:
      - vidconf_directory: /vidconf
      - guacamole_download_url: http://archive.apache.org/dist/guacamole/1.1.0/binary/guacamole-1.1.0.war
      - guacamole_client_download_directory: "{{vidconf_directory}}/guacamole"
      - vnc_configuration_directory: "{{vidconf_directory}}/vnc"
      - network_interface_to_display: eth0

    handlers:
      - name: restart tomcat8
        service:
          name: tomcat8
          state: restarted
        become: yes
        listen: "restart guacamole"
      - name: restart guacd
        service:
          name: guacd
          state: restarted
        become: yes
        listen: "restart guacamole"
      - name: restart nginx
        service:
          name: nginx
          state: restarted
          enabled: yes
        become: yes
      - name: update wallpaper
        shell: ./update_vidconf_wallpaper_wrapper.sh
        args:
          chdir: "{{vidconf_directory}}"

    tasks:
      - fail:
          msg: You must call Ansible with '-e guac_login_password=PASSWORD'
        when: guac_login_password is not defined
      - name: "Ensure {{vidconf_directory}} directory exists."
        file:
          state: directory
          path: "{{vidconf_directory}}"
          owner: "{{ansible_user_id}}"
          group: "{{ansible_user_id}}"
        become: yes
      # These tasks are moved to the top because they tend to fail frequently.
      - name: Ensure Guacamole download directory exists.
        file:
          state: directory
          path: "{{guacamole_client_download_directory}}"
        become: yes
      - name: Download the Apache Guacamole client.
        get_url:
          url: "{{guacamole_download_url}}"
          dest: "{{guacamole_client_download_directory}}"
        register: guacamole_client_download
        become: yes

      - name: "Set default runlevel to 5 (i.e. full X Windows on startup)"
        shell: |
          if systemctl get-default | grep -vqL graphical.target
          then
            systemctl isolate graphical.target
            systemctl set-default graphical.target
            echo changed
          fi
        register: set_runlevel
        changed_when: "'changed' in set_runlevel.stdout"
        become: yes
      # Since we'll be using the device as a server, we'd like to keep the
      # wireless adapter ready at all times.
      - name: Disable wifi power management.
        lineinfile:
          path: /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
          regexp: '^\s*wifi.powersave\s*='
          line: 'wifi.powersave = 2'
        become: yes
      - name: Disable USB power management.
        lineinfile:
          path: /boot/extlinux/extlinux.conf
          regexp: '^\s*usbcore.autosuspend\s*='
          line: 'usbcore.autosuspend=-1'
        become: yes
      # Make sure the devices stays active and doesn't lock anyone out.
      - name: Disable screen saver and screen lock.
        shell: |
          echo `gsettings get org.gnome.desktop.session idle-delay`
          gsettings set org.gnome.desktop.session idle-delay 0
          echo `gsettings get org.gnome.desktop.screensaver lock-enabled`
          gsettings set org.gnome.desktop.screensaver lock-enabled false
        register: disable_screen_lock
        changed_when: "'uint32 0' not in disable_screen_lock.stdout or 'false' not in disable_screen_lock.stdout"
      - name: Set mouse to not disappear after a period of inactivity.
        shell:
          echo `gsettings get org.gnome.settings-daemon.plugins.cursor active`
          gsettings set org.gnome.settings-daemon.plugins.cursor active false
        register: disable_mouse_hide
        changed_when: "'true' in disable_mouse_hide.stdout"
      # Setup auto-login.
      - name: Set auto-login user to "{{ansible_user_id}}".
        ini_file:
          path: /etc/gdm3/custom.conf
          section: daemon
          option: AutomaticLogin
          value: "{{ansible_user_id}}"
        become: yes
      - name: Enable auto-login.
        ini_file:
          path: /etc/gdm3/custom.conf
          section: daemon
          option: AutomaticLoginEnable
          value: true
        become: yes
      # Install ufw so that we can easily configure the firewall.
      - name: Install ufw.
        apt:
          pkg:
            - ufw
        become: yes
      # Without disabling IPV6, we get errors in the subsequent UFW commands :(.
      - name: Disable IPV6 in ufw configuration.
        lineinfile:
          path: /etc/default/ufw
          regexp: '^\s*IPV6\s*='
          line: 'IPV6=no'
        become: yes
      - name: Allow SSH in ufw.
        ufw:
          rule: allow
          port: 22
          proto: tcp
        become: yes
      - name: Enable ufw and set policy to reject.
        ufw:
          policy: reject
          state: enabled
        become: yes
      # Setup the VNC server.
      - name: Install x11vnc server.
        apt:
          pkg:
            - x11vnc
            - net-tools
        become: yes
      - name: Ensure VNC configuration directory exists.    
        file:
          state: directory
          path: "{{vnc_configuration_directory}}"
        become: yes
      - name: Configure VNC server with passwd file.
        copy:
          src: vnc_passwd
          dest: "{{vnc_configuration_directory}}/passwd"
        become: yes
      - name: Install VNC service file so it can start on boot.
        copy:
          src: x11vnc.service
          dest: /lib/systemd/system/x11vnc.service
        register: install_vnc_service
        become: yes
      - name: "Enable x11vnc.service to launch x11vnc on startup."
        service:
          name: x11vnc
          state: started
          daemon_reload: yes
          enabled: yes
        when: install_vnc_service.changed
        become: yes
      # Setup an RDP server
      # (not strictly necessary, but it offers an extra option to VNC).
      - name: Install RDP server.
        apt:
          pkg:
            - xrdp
      - name: Configure Xrdp.
        copy:
          src: xrdp.ini
          dest: /etc/xrdp/xrdp.ini
        become: yes
      # We'll use Apache Guacamole for remote desktop support because it enables
      # clients to connect via browser.
      - name: Install Apache Guacamole for remote desktop support.
        apt:
          pkg:
            - guacamole-tomcat
            - libguac-client-rdp0
        become: yes
      - name: Install the Apache Guacamole client application.
        file:
          state: link
          src: "{{guacamole_client_download.dest}}"
          dest: /var/lib/tomcat8/webapps/guacamole.war
        notify: "restart guacamole"
        become: yes
      - name: Ensure Tomcat Guacamole configuration directory exists.
        file:
          state: directory
          path: /usr/share/tomcat8/.guacamole
        become: yes
      - name: Install the default Apache Guacamole configuration properties.
        file:
          state: link
          src: /etc/guacamole/guacamole.properties
          dest: /usr/share/tomcat8/.guacamole/guacamole.properties
        notify: "restart guacamole"
        become: yes
      - name: Setup /etc/guacamole/tomcat.xml.
        copy:
          src: tomcat.xml
          dest: /etc/guacamole/tomcat.xml
        notify: "restart guacamole"
        become: yes
      - name: Setup /etc/guacamole/user-mapping.xml.
        template:
          src: user-mapping.xml
          dest: /etc/guacamole/user-mapping.xml
        notify: "restart guacamole"
        become: yes
      - name: Remove "apache2" package
        apt:
          name: apache2
          state: absent
        become: yes
      # Setup NGINX as a reverse proxy for the Tomcat Guacamole web server.
      - name: Install NGINX.
        apt:
          pkg:
            - nginx
      - name: Disable default NGINX site.
        file:
          state: absent
          path: /etc/nginx/sites-enabled/default
        become: yes
      - name: Install Guacamole reverse proxy NGINX site.
        copy:
          src: nginx_sites_guacamole
          dest: /etc/nginx/sites-available/guacamole
        become: yes
        notify: "restart nginx"
      - name: Activate NGINX Guacamole site.
        file:
          state: link
          src: /etc/nginx/sites-available/guacamole
          dest: /etc/nginx/sites-enabled/guacamole
        become: yes
        notify: "restart nginx"

      # Open up the web port to enable access to the system, which essentially
      # activates the entire service.
      - name: Allow nginx HTTPs port in ufw.
        ufw:
          rule: allow
          port: 443
          proto: tcp
        become: yes
      - name: Allow nginx HTTP port in ufw (used to port forward to HTTPS).
        ufw:
          rule: allow
          port: 80
          proto: tcp
        become: yes

      # Setup some scripts to update the desktop wallpaper with an image
      # that indicates the device's IP address, as well as login instructions.
      - name: Install Chromium.
        apt:
          pkg:
            - chromium-browser
      - name: Create wallpaper update wrapper script.
        template:
          src: update_vidconf_wallpaper_wrapper.jinja2.sh
          dest: "{{vidconf_directory}}/update_vidconf_wallpaper_wrapper.sh"
          mode: 0755
        notify: "update wallpaper"
      - name: Copy wallpaper update script.
        template:
          src: update_vidconf_wallpaper.py
          dest: "{{vidconf_directory}}/update_vidconf_wallpaper.py"
        notify: "update wallpaper"
      - name: Copy HTML template file.
        copy:
          src: vidconf_wallpaper.template.html
          dest: "{{vidconf_directory}}/vidconf_wallpaper.template.html"
        notify: "update wallpaper"
      - name: Setup cron job to update wallpaper every hour.
        cron:
          name: update wallpaper
          special_time: hourly
          job: "{{vidconf_directory}}/update_vidconf_wallpaper_wrapper.sh"
